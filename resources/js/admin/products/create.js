document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('productForm');
    const nameInput = document.getElementById('name');
    const skuInput = document.getElementById('sku');
    const imageInput = document.getElementById('images');
    const dropZone = document.getElementById('dropZone');
    const imagePreview = document.getElementById('imagePreview');
    const errorContainer = document.getElementById('errorContainer');

    // Генерация SKU из названия
    nameInput.addEventListener('input', (e) => {
        if (!skuInput.value || skuInput.dataset.autogenerated) {
            const generatedSku = generateSku(e.target.value);
            skuInput.value = generatedSku;
            skuInput.dataset.autogenerated = 'true';
        }
    });

    skuInput.addEventListener('input', () => {
        skuInput.dataset.autogenerated = 'false';
    });

    function generateSku(name) {
        return 'ECO-' + name
            .replace(/[^\w\s]/gi, '')
            .replace(/\s+/g, '-')
            .toUpperCase()
            .slice(0, 20);
    }

    // Загрузка изображений
    imageInput.addEventListener('change', handleImages);
    
    // Drag and drop
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('drop-zone-active');
    });

    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('drop-zone-active');
    });

    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('drop-zone-active');
        
        const files = e.dataTransfer.files;
        handleFiles(files);
    });

    function handleImages(e) {
        const files = e.target.files;
        handleFiles(files);
    }

    function handleFiles(files) {
        const maxFiles = 10;
        const maxSize = 5 * 1024 * 1024; // 5MB
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        
        // Проверка количества файлов
        if (files.length + imagePreview.children.length > maxFiles) {
            showError(`Максимальное количество изображений: ${maxFiles}`);
            return;
        }

        Array.from(files).forEach(file => {
            // Проверка типа файла
            if (!allowedTypes.includes(file.type)) {
                showError('Допустимые форматы: JPG, PNG, GIF');
                return;
            }

            // Проверка размера
            if (file.size > maxSize) {
                showError('Размер файла не должен превышать 5MB');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const img = new Image();
                img.onload = () => {
                    if (img.width < 200 || img.height < 200) {
                        showError('Минимальный размер изображения 200x200px');
                        return;
                    }
                    addImagePreview(e.target.result, file);
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Очищаем input для возможности повторной загрузки тех же файлов
        imageInput.value = '';
    }

    function addImagePreview(src, file) {
        const wrapper = document.createElement('div');
        wrapper.className = 'image-preview-item';
        
        const img = document.createElement('img');
        img.src = src;
        img.alt = file.name;
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'remove-image';
        removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
        removeBtn.onclick = () => wrapper.remove();
        
        wrapper.appendChild(img);
        wrapper.appendChild(removeBtn);
        imagePreview.appendChild(wrapper);
        
        // Создаем скрытый input для формы
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.name = 'images[]';
        fileInput.className = 'hidden';
        fileInput.files = createFileList([file]);
        wrapper.appendChild(fileInput);
    }

    // Вспомогательная функция для создания FileList из массива файлов
    function createFileList(files) {
        const dataTransfer = new DataTransfer();
        files.forEach(file => dataTransfer.items.add(file));
        return dataTransfer.files;
    }

    // Валидация и отправка формы
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearErrors();

        const formData = new FormData(form);
        
        // Базовая валидация
        if (!formData.get('name')) {
            showError('Название продукта обязательно');
            return;
        }

        if (!formData.get('sku')) {
            showError('SKU обязателен');
            return;
        }

        if (!formData.get('price') || formData.get('price') <= 0) {
            showError('Укажите корректную цену');
            return;
        }

        if (!formData.get('category_id')) {
            showError('Выберите категорию');
            return;
        }

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || Object.values(result.errors)[0][0] || 'Ошибка при создании продукта');
            }

            // Редирект на страницу списка продуктов
            window.location.href = '/admin/products';
            
        } catch (error) {
            showError(error.message);
        }
    });

    function showError(message) {
        errorContainer.classList.remove('hidden');
        errorContainer.textContent = message;
    }

    function clearErrors() {
        errorContainer.classList.add('hidden');
        errorContainer.textContent = '';
    }
});